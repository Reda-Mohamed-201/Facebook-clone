
datasource db {
  provider = "mysql" // Choose your database provider
  url      = env("DATABASE_URL") // Connection URL for your database
}

generator client {
  provider = "prisma-client-js" // Generate Prisma Client
}

model User {
  id        String   @id
  username  String   @unique
  avatar    String?
  cover     String?
  name      String?
  surname   String?
  bio       String?
  city      String?
  live      String?
  school    String?
  faculty   String?
  work      String?
  linkedin  String?
  github    String?
  createdAt DateTime @default(now())

  posts                  Post[]
  comments               Comment[]
  likes                  Like[]
  stories                Story[]
  followers              Follow[]        @relation("UserFollowers")
  following              Follow[]        @relation("UserFollowing")
  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
  blockedUsers           BlockedUser[]   @relation("BlocksSent")
  blockedBy              BlockedUser[]   @relation("BlocksReceived")
  messagesSent           Message[]       @relation("MessagesSent")
  messagesReceived       Message[]       @relation("MessagesReceived")
  callsMade              Call[]          @relation("CallsMade")
  callsReceived          Call[]          @relation("CallsReceived")
  replies                Reply[] // Add replies relation
}

model Post {
  id        Int       @id @default(autoincrement())
  desc   String
  imageUrl  String? // URL for image, if exists
  userId    String // User who created the post
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int // The post being commented on
  userId    String // User who made the comment
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies   Reply[] // Replies to this comment
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reply {
  id        Int      @id @default(autoincrement())
  content   String
  commentId Int // The comment being replied to
  userId    String // User who made the reply
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // User relation
  createdAt DateTime @default(now())
}

model Story {
  id        Int      @id @default(autoincrement())
  userId    String @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
  imageUrl  String
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   String // User who sent the message
  receiverId String // User who receives the message
  content    String
  sender     User     @relation("MessagesSent", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("MessagesReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Call {
  id         Int      @id @default(autoincrement())
  callerId   String // User who initiates the call
  receiverId String // User who receives the call
  type       String // Call type: "audio" or "video"
  caller     User     @relation("CallsMade", fields: [callerId], references: [id], onDelete: Cascade)
  receiver   User     @relation("CallsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  String // User who follows
  followingId String // User who is followed
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String // User who likes
  postId    Int? // Post liked
  commentId Int? // Comment liked
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model FollowRequest {
  id         Int      @id @default(autoincrement())
  senderId   String // User who sent the request
  receiverId String // User who receives the request
  sender     User     @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  accepted   Boolean  @default(false) // Indicates if the request has been accepted

  @@unique([senderId, receiverId])
}

model BlockedUser {
  id        Int      @id @default(autoincrement())
  blockerId String // User who blocks
  blockedId String // User who is blocked
  blocker   User     @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked   User     @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
